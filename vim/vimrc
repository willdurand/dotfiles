" VIM configuration
" The original config comes from Vincent Jousse.
" 99.99% modified by William Durand <will+git@drnd.me>
syntax on
filetype plugin indent on

"" Leader key

let mapleader = ","

"" Global

" color scheme
set background=dark

if $ITERM_PROFILE == 'Presentation Mode' || $ITERM_PROFILE == 'White'
  set background=light
endif

colorscheme solarized8

" Set title on X window
set title

" Hide buffer instead of abandoning when unloading
set hidden

" http://vim.wikia.com/wiki/FileName_Completion_in_Shell_Scripts
set isfname-==

" Show line numbers
set number
" Show cursor position
set ruler

" Highlight matches as you type
set incsearch
" Highlight matches
set hlsearch
" set case insensitivity
set ignorecase
" unless there's a capital letter
set smartcase
" Turn on line wrapping
set wrap
" Show 3 lines of context around the cursor
set scrolloff=3

" No beeping
set visualbell
" abbrev. of messages (avoids 'hit enter')
set shortmess+=filmnrxoOtT

" Don't make a backup before overwriting a file
set nobackup
" And again
set nowritebackup
" Use an SCM instead of swap files
set noswapfile

" Show the status line all the time
set laststatus=2

" http://vim.wikia.com/wiki/Backspace_and_delete_problems
set backspace=indent,eol,start

set autoindent
" copy the previous indentation on autoindenting
set copyindent
" use multiple of shiftwidth when indenting with '<' and '>'
set shiftround
" set show matching parenthesis
set showmatch

" Read vim config defined in files
set modeline
set modelines=1

" command and search pattern history
set history=10000

" make plugins smoother
set lazyredraw

" always replace all occurences of a line
set gdefault

" display all matching files when we tab complete
set wildmenu

" use persistent undo
let s:undoDir = "/tmp/.undodir_" . $USER
if !isdirectory(s:undoDir)
  call mkdir(s:undoDir, "", 0700)
endif
let &undodir=s:undoDir
set undofile

" http://vim.wikia.com/wiki/Toggle_auto-indenting_for_code_paste
set pastetoggle=<F2>

" allow extended digraphs
set encoding=utf-8

" disable folding
set nofoldenable

set completeopt=menuone,menu,longest
" turn off that preview window that shows the issue body
" see: https://github.com/tpope/vim-rhubarb
set completeopt-=preview

" auto-reload files when changed
set autoread

"" netrw config

" see: https://blog.hellojs.org/configure-vim-from-scratch-efe5cbc1c563
" absolute width of netrw window
let g:netrw_winsize = -28
" tree-view
let g:netrw_liststyle = 3
" sort is affecting only: directories on the top, files below
let g:netrw_sort_sequence = '[\/]$,*'
" open file in a new tab
let g:netrw_browse_split = 3
" remove banner
let g:netrw_banner = 0

" display vertical line
if exists('&colorcolumn')
  set colorcolumn=80
endif

" Delete comment character when joining commented lines
if v:version > 703 || v:version == 703 && has("patch541")
  set formatoptions+=j
endif

"" Abbreviations

" My information
iab xdate <C-R>=strftime("%d/%m/%Y %H:%M:%S")
iab xname <C-R> William Durand
iab xsigp <C-R> William Durand <will+git@drnd.me>

"" Mapping

" make the view port scroll faster
nnoremap <C-e> 3<C-e>
nnoremap <C-y> 3<C-y>
nnoremap <C-p> 3<C-p>

" resize splitted views faster
nnoremap <C-w>< 5<C-w><
nnoremap <C-w>> 5<C-w>>

" convenient mapping to swith tab/indent settings
nnoremap <leader>2 :set tabstop=2<cr>:set shiftwidth=2<cr>:set softtabstop=2<cr>
nnoremap <leader>4 :set tabstop=4<cr>:set shiftwidth=4<cr>:set softtabstop=4<cr>
nnoremap <leader>8 :set tabstop=8<cr>:set shiftwidth=8<cr>:set softtabstop=8<cr>:set noexpandtab<cr>

" pull word under cursor into LHS of a substitute (for quick search and replace)
nnoremap <leader>zs :%s/<C-r>=expand("<cword>")<cr>/

" clear search highlight
if maparg('<C-L>', 'n') ==# ''
  nnoremap <silent> <leader>/ :nohlsearch<C-R>=has('diff')?'<Bar>diffupdate':''<cr><cr><C-L>
endif

" invisible character
nnoremap <leader>l :set list!<cr>
set listchars=nbsp:¤,tab:>-,trail:¤,extends:>,precedes:<,eol:¬,trail:·

" make
nnoremap <leader>m :make<cr>

" Hex read
nnoremap <Leader>hr :%!xxd<CR> :set filetype=xxd<CR>
" Hex write
nnoremap <Leader>hw :%!xxd -r<CR> :set binary<CR> :set filetype=plain<CR>

" Autogroups

augroup cursors
  autocmd!

  " automatically open and close the popup menu / preview window
  autocmd CursorMovedI,InsertLeave * if pumvisible() == 0|silent! pclose|endif

  " When editing a file, always jump to the last known cursor position
  autocmd BufReadPost *
        \ if line("'\"") > 1 && line("'\"") <= line("$") |
        \   exe "normal! g`\"" |
        \ endif

  " Highlight cursor line
  " https://github.com/chanmix51/vim-config/blob/master/vimrc
  autocmd insertEnter * set cursorline
  autocmd insertLeave * set nocursorline
  autocmd insertEnter *.yml set cursorcolumn
  autocmd insertLeave *.yml set nocursorcolumn
augroup END

augroup whitespaces
  autocmd!

  " highlight trailing whitespaces
  highlight ExtraWhitespace ctermbg=red guibg=red
  match ExtraWhitespace /\s\+$/
  autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
  autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
  autocmd InsertLeave * match ExtraWhitespace /\s\+$/
  autocmd BufWinLeave * call clearmatches()

  " automatically remove trailing whitespace before write
  function! StripTrailingWhitespace()
    normal mZ
    %s/\s\+$//e
    if line("'Z") != line(".")
      echo "Stripped whitespace\n"
    endif
    normal `Z
  endfunction
  autocmd BufWritePre * :call StripTrailingWhitespace()
augroup END

augroup utils
  autocmd!

  " create directory if not exists
  function! <SID>MkdirsIfNotExists(directory)
    if(!isdirectory(a:directory))
      call system('mkdir -p '.shellescape(a:directory))
    endif
  endfunction
  autocmd BufWrite * :call <SID>MkdirsIfNotExists(expand('<afile>:h'))

  " Highlight words to avoid in tech writing
  " ========================================
  "
  "   http://css-tricks.com/words-avoid-educational-writing/
  "   https://github.com/pengwynn/dotfiles/blob/12159ea233180344be4e25d57056ccd37061a153/vim/vimrc.symlink
  "
  highlight TechWordsToAvoid cterm=undercurl

  function MatchTechWordsToAvoid()
    match TechWordsToAvoid /\<\(obviously\|basically\|simply\|of course\|clearly\|just\|everyone knows\|so\|easy\|assuming\|intuitively\|however\|in order to\|in the end\|able to\|occur\|happen\|is\|are\|was\|were\|that\|really\)\>/
  endfunction

  autocmd FileType markdown call MatchTechWordsToAvoid()
  autocmd BufWinEnter *.md call MatchTechWordsToAvoid()
  autocmd InsertEnter *.md call MatchTechWordsToAvoid()
  autocmd InsertLeave *.md call MatchTechWordsToAvoid()
  autocmd BufWinLeave *.md call clearmatches()

  " do not auto insert comment chars on newline
  autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o
augroup END

"" Nice commands

" sudo to write
command! W w !sudo tee % > /dev/null

" copy (relative) filename to clipboard
nnoremap <leader>cf :let @*=expand("%") \| :echo 'copied!'<cr>
" copy absolute filename to clipboard
nnoremap <leader>caf :let @*=expand("%:p") \| :echo 'copied! (absolute)'<cr>

" Format JSON
if executable('jq')
  nnoremap <leader>j :%!jq '.'<cr>
else
  echo 'jq is not installed\n'
endif

"" Plugins

" airline
let g:airline_powerline_fonts = 1
let g:airline_theme = 'minimalist'
let g:airline_extensions = ['hunks', 'branch', 'whitespace']
set noshowmode

" GitGutter
set signcolumn=yes
set updatetime=1000
let g:gitgutter_map_keys = 0
" ignore whitespaces
let g:gitgutter_diff_args = '-w'

" Gist
let g:gist_clip_command    = 'pbcopy'
let g:gist_detect_filetype = 1
let g:gist_post_private    = 1

" fzf
set rtp+=/usr/local/opt/fzf/
set rtp+=/opt/homebrew/opt/fzf/
let g:fzf_colors =
\ { 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Comment'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'border':  ['fg', 'Ignore'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment'] }
nnoremap <leader>t :Files<cr>
nnoremap <leader>r :Rg<cr>

" polyglot
let g:polyglot_disabled = ['go', 'rust', 'typescript']

" go
let g:go_auto_type_info = 1

" UltiSnips
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"

" Black
let g:black_skip_string_normalization = 1

" enable doxygen highlighting
let g:load_doxygen_syntax = 1

" revert hub ftdetect because it breaks vim-rhubarb
autocmd BufNewFile,BufRead PULLREQ_EDITMSG set filetype=gitcommit

" termdebug
let g:termdebug_wide = 1
packadd! termdebug

" searchfox
function! OpenSearchFox()
  let current_file = expand('%')
  if current_file ==# ''
    return
  endif

  let url = 'https://searchfox.org/mozilla-central/source/'.current_file.'#'.line('.')

  if has('mac') || has('macunix') || has('gui_macvim')
    exe 'silent !open "'.escape(url, '#').'"'
    redraw!
  endif

  if has('clipboard')
    let @+ = url
  else
    let @" = url
  endif

  echomsg 'searchfox link copied'
endfunction

command! SFOpen :call OpenSearchFox()
nnoremap <leader>sf :SFOpen<cr>
